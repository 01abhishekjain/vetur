{
  "name": "vetur",
  "displayName": "Vetur",
  "description": "Vue tooling for VSCode",
  "author": "Pine Wu <octref@gmail.com>",
  "icon": "asset/vue.png",
  "version": "0.9.10",
  "publisher": "octref",
  "scripts": {
    "compile": "tsc -p client",
    "precommit": "npm run lint",
    "prepush": "npm run test",
    "lint": "tslint 'server/src/**/*.ts' 'client/src/**/*.ts'",
    "sync:server": "cd server && npm publish",
    "sync:client": "cd client && yarn upgrade vue-language-server && yarn && tsc",
    "sync": "npm run sync:server || npm run sync:client",
    "test:server": "cd server && npm run compile && npm test",
    "test": "npm run lint && npm run test:server",
    "doc": "bash ./build/update-docs.sh"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vuejs/vetur.git"
  },
  "keywords": [
    "vetur",
    "Vue",
    "vue",
    "vuejs"
  ],
  "categories": [
    "Languages"
  ],
  "engines": {
    "vscode": "^1.16.0"
  },
  "dependencies": {},
  "activationEvents": [
    "onLanguage:vue"
  ],
  "main": "./client/out/vueMain",
  "contributes": {
    "breakpoints": [
      {
        "language": "vue"
      }
    ],
    "languages": [
      {
        "id": "vue",
        "aliases": [
          "Vue",
          "vue"
        ],
        "extensions": [
          ".vue"
        ],
        "configuration": "./languages/vue.json"
      },
      {
        "id": "vue-html",
        "aliases": [
          "Vue-html"
        ],
        "configuration": "./languages/vue-html.json"
      },
      {
        "id": "postcss",
        "aliases": [
          "PostCSS",
          "POSTCSS"
        ],
        "configuration": "./languages/postcss.json"
      }
    ],
    "grammars": [
      {
        "language": "vue",
        "scopeName": "source.vue",
        "path": "./syntaxes/vue.tmLanguage",
        "embeddedLanguages": {
          "text.html.basic": "html",
          "text.html.vue-html": "vue-html",
          "text.jade": "jade",
          "text.pug": "pug",
          "source.css": "css",
          "source.css.scss": "scss",
          "source.css.less": "less",
          "source.css.postcss": "postcss",
          "source.sass": "sass",
          "source.stylus": "stylus",
          "source.js": "javascript",
          "source.ts": "typescript",
          "source.coffee": "coffeescript"
        }
      },
      {
        "language": "postcss",
        "scopeName": "source.css.postcss",
        "path": "./syntaxes/postcss.json"
      },
      {
        "language": "vue-html",
        "scopeName": "text.html.vue-html",
        "path": "./syntaxes/vue-html.tmLanguage",
        "embeddedLanguages": {
          "source.js": "javascript"
        }
      }
    ],
    "configuration": {
      "title": "vetur configuration",
      "properties": {
        "vetur.colorDecorators.enable": {
          "type": "boolean",
          "default": true,
          "description": "Use color decorators in vue"
        },
        "vetur.validation.template": {
          "type": "boolean",
          "default": true,
          "description": "Validate vue-html in <template> using eslint-plugin-vue"
        },
        "vetur.validation.style": {
          "type": "boolean",
          "default": true,
          "description": "Validate css/scss/less/postcss in <style>"
        },
        "vetur.validation.script": {
          "type": "boolean",
          "default": true,
          "description": "Validate js/ts in <script>"
        },
        "vetur.format.styleInitialIndent": {
          "type": "boolean",
          "default": false,
          "description": "Whether to have initial indent for <style> section"
        },
        "vetur.format.scriptInitialIndent": {
          "type": "boolean",
          "default": false,
          "description": "Whether to have initial indent for <script> section"
        },
        "vetur.format.html.max_preserve_newlines": {
          "type": "number",
          "default": 1,
          "decription": "Maximum number of line breaks to be preserved in one chunk (0 to disable)"
        },
        "vetur.format.html.preserve_newlines": {
          "type": "boolean",
          "default": true,
          "decription": "Whether existing line breaks before elements should be preserved (only works before elements, not inside tags or for text)"
        },
        "vetur.format.html.wrap_line_length": {
          "type": "number",
          "default": 0,
          "decription": "Lines should wrap at next opportunity after this number of characters (0 to disable)"
        },
        "vetur.format.html.wrap_attributes": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "force",
            "force-aligned",
            "force-expand-multiline"
          ],
          "enumDescriptions": [
            "Wrap attributes only when line length is exceeded",
            "Wrap each attribute except first",
            "Wrap each attribute except first and keep aligned",
            "Wrap each attribute"
          ],
          "decription": "Wrap attributes"
        },
        "vetur.format.css.newline_between_rules": {
          "type": "boolean",
          "default": true,
          "description": "Add a new line after every css rule"
        },
        "vetur.format.css.preserve_newlines": {
          "type": "boolean",
          "default": true,
          "description": "Whether existing line breaks before elements should be preserved (only works before elements, not inside tags or for text)"
        },
        "vetur.format.js.InsertSpaceBeforeFunctionParenthesis": {
          "type": "boolean",
          "default": false,
          "description": "Add a space before function parenthesis"
        },
        "stylusSupremacy.insertColons": {
          "description": "Insert or remove a colon between a property name and its value.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertSemicolons": {
          "description": "Insert or remove a semi-colon after a property value, a variable declaration, a variable assignment and a mixin/function call.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertBraces": {
          "description": "Insert or remove a pair of curly braces where they are supposed to be. Note that this option does not affect @block construction, see alwaysUseAtBlock.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertNewLineAroundImports": {
          "description": "Insert a new-line around a group of @import/@require(s).\nOnly apply to imports outside a block when set to \"root\", or only apply to imports inside a block when set to \"nested\".",
          "enum": [
            true,
            false,
            "root",
            "nested"
          ],
          "default": true
        },
        "stylusSupremacy.insertNewLineAroundBlocks": {
          "description": "Insert a new-line around blocks.\nOnly apply to top-level blocks when set to \"root\", or only apply to nested blocks when set to \"nested\".",
          "enum": [
            true,
            false,
            "root",
            "nested"
          ],
          "default": true
        },
        "stylusSupremacy.insertNewLineAroundProperties": {
          "description": "Insert a new-line around a group of CSS properties.\nUnlike insertNewLineAroundBlocks and insertNewLineAroundOthers, this option cannot be set to \"root\" nor \"nested\" because CSS properties cannot be placed at the top level.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.insertNewLineAroundOthers": {
          "description": "Insert a new-line around a group of non-properties, non-imports and non-blocks.\nOnly apply to others outside a block when set to \"root\", or only apply to others inside a block when set to \"nested\".",
          "enum": [
            true,
            false,
            "root",
            "nested"
          ],
          "default": false
        },
        "stylusSupremacy.insertNewLineBetweenSelectors": {
          "description": "Insert or remove a new-line between selectors.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.insertSpaceBeforeComment": {
          "description": "Insert or remove a white-space before a comment.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertSpaceAfterComment": {
          "description": "Insert or remove a white-space after a comment.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertSpaceAfterComma": {
          "description": "Insert or remove a white-space after a comma.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertSpaceInsideParenthesis": {
          "description": "Insert or remove a white-space after an open parenthesis and before a close parenthesis.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.insertParenthesisAfterNegation": {
          "description": "Insert a pair of parentheses or a white-space after a negation operator. This does nothing if a pair of parentheses is already after the negation operator.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.insertParenthesisAroundIfCondition": {
          "description": "Insert or remove a pair of parentheses around if-condition.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.insertNewLineBeforeElse": {
          "description": "Insert or remove a new-line before else keyword.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.insertLeadingZeroBeforeFraction": {
          "description": "Insert or remove a zero before a number that between 1 and 0.",
          "type": "boolean",
          "default": true
        },
        "stylusSupremacy.quoteChar": {
          "description": "Represent a quote character that is used to begin and terminate a string. You must choose either a single-quote or a double-quote.",
          "enum": [
            "'",
            "\""
          ],
          "default": "'"
        },
        "stylusSupremacy.sortProperties": {
          "description": "Can be either false for not sorting, \"alphabetical\" for sorting CSS properties from A to Z, \"grouped\" for sorting CSS properties according to Stylint and nib, or an array of property names that defines the property order, for example [\"color\", \"background\", \"display\"].",
          "oneOf": [
            {
              "enum": [
                false,
                "alphabetical",
                "grouped"
              ]
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          ],
          "default": false
        },
        "stylusSupremacy.alwaysUseImport": {
          "description": "Replace @require with @import, or do nothing.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.alwaysUseNot": {
          "description": "Replace ! operator with not keyword, or vice versa.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.alwaysUseAtBlock": {
          "description": "Replace an increased-indent at-block construction with an explicit one with @block keyword or vice versa.\nNote that this option does not incorporate insertBraces option.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.alwaysUseExtends": {
          "description": "Convert @extend keyword to @extends keyword, or vice versa.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.alwaysUseNoneOverZero": {
          "description": "Replace 0 (regardless of its unit) with none for border and outline properties, or do nothing.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.alwaysUseZeroWithoutUnit": {
          "description": "Replace 0 (regardless of its unit) with 0 (without units), or do nothing.",
          "type": "boolean",
          "default": false
        },
        "stylusSupremacy.reduceMarginAndPaddingValues": {
          "description": "Reduce margin and padding duplicate values by converting margin x x x x to margin x, margin x y x y to margin x y, and margin x y y y to margin x y y where x, y is a unique property value.",
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "devDependencies": {
    "husky": "^0.14.3",
    "tslint": "^5.4.3",
    "typescript": "^2.3.4"
  }
}
